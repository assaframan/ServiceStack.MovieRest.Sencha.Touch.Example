/*
 * File: app/view/RatingField.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Movies.view.RatingField', {
    extend: 'Ext.field.Field',
    alias: 'widget.RatingField',

    config: {
        inputCls: 'x-rating-star-input',
        label: 'Field',
        value: -1,
        singleColorPerValue: false,
        layoutOnOrientationChange: true,
        minValue: -1,
        itemsCount: 5,
        itemCls: 'x-rating-star',
        itemHoverCls: 'x-rating-star-hover',
        showClear: false,
        defaultValue: -1,
        clearCls: 'x-rating-clear',
        maxValue: 5
    },

    beforeInitConfig: function(config) {

        Ext.apply(config, {
            baseCls: Ext.baseCSSPrefix + 'field x-rating-field'
        });

        Ext.apply(config, {
            component: {
                tpl: new Ext.XTemplate(
                '<tpl for="items">',
                '<div index="{[xindex - 1]}" class="{parent.itemCls} x-rating-item">',
                //'{tooltip}', TBD
                '</div>',
                '</tpl>',
                '<tpl if="clearIcon">',
                '<div class="{clearCls}">',
                '</div>',
                '</tpl>',
                {
                    compile: true
                }),
                cls: 'x-rating-inner'
            }
        });


        this.callParent([config]);
    },

    initialize: function() {
        var me = this;
        me.callParent();

        me.element.on({
            scope: me,
            touchstart: me.onTouchStart,
            touchmove: me.onTouchMove,
            preventDefault: true
        });
    },

    updateComponent: function(newComponent, oldComponent) {
        this.callParent(arguments);
        if (oldComponent) {
            //TODO: cleanup event subscriptions
            //this.clearBtn
        }
        var innerElement = this.innerElement,
            cls = this.getCls();

        this.getComponent(); //why do we make this call?        
        var newConfig = Ext.applyIf({
            items: new Array(this.getItemsCount() || 0)
        }, this.config);        
        newComponent._tpl.overwrite(newComponent.element.dom, newConfig);
        this.items = newComponent.element.select('.x-rating-item', newComponent.element.dom);        
        if (this.config.clearIcon) {
            this.clearBtn = newComponent.element.down('.' + this.getClearCls());
            this.clearBtn.on('tap', this.onClear, this);
        }        
    },

    onTouchStart: function(e) {
        /*
        * Start assigning values (selecting stars) when user touched the control.
        */
        if (this.clearBtn && e.target == this.clearBtn.dom) {
            this.onClear();
            return;
        }
        this.onTouchMove(e);
    },

    onTouchMove: function(e) {
        /*
        * Calculate the position of thumb related to control's items and determine what value is selected
        */
        if (this.getDisabled()) {
            return;
        }
        var offset = this.innerElement.getXY();
        var x = e.touches[0].pageX - offset[0];
        if (!Ext.isDefined(this.diameter)) {
            var size = this.items.first().getSize();
            this.diameter = Math.min(size.height, size.width);    
        }

        var items = this.items;        
        var count = items.getCount();
        if(x < 0)
        {
            x = 0;
        }

        var targetIndex = Math.ceil((x / this.diameter) / count * this.getMaxValue() );
        if (targetIndex > 0) {//TODO check if targetIndex is a number
            this.setValue(targetIndex);
        }

    },

    applyValue: function(value) {
        value = parseFloat(value);        
        if (isNaN(value) || value === null) {
            value = this.getDefaultValue();
        }

        this._value = value;
    },

    displayValue: function(value) {
        /*
        * Display value's representation in UI
        * @param {Number} value - index of item to select to
        */
        if (!this.rendered) {
            //TODO: replace event with ST2.0 equivalent            
            this.on('painted', Ext.Function.bind(this.displayValue, this, [value]), this, { single: true });
            return;
        }
        var items = this.items;        
        var count = items.getCount();
        var itemCls = this.getItemCls();
        var hoverCls = this.getItemHoverCls();

        var valueToDisplay = value / this.getMaxValue() * count - 1;


        for (var i = 0; i < count; i++) {
            var item = items.item(i);
            var curItemIsOn = i <= valueToDisplay || (i === 0 && value > 0);
            item[curItemIsOn ? 'addCls' : 'removeCls'](hoverCls);
            item[curItemIsOn ? 'removeCls' : 'addCls'](itemCls);
        }
    },

    setValue: function(value) {
        var currentValue = this._value;
        value = parseFloat(value);
        if (isNaN(value) || value === null) {
            throw 'Argument exception: value argument is not a number.';
        }
        var minValue = this.getMinValue();        
        //auto-correct user's input
        if (Ext.isNumber(minValue) && value < minValue) {
            value = minValue;
        }
        if (value > this.getMaxValue()) {
            value = this.getMaxValue();
        }
        this.callParent([value]);        
        this.displayValue(value);      
        this.fireEvent('change', this, value, currentValue);	
    },

    reset: function() {
        this.setValue(this.getDefaultValue());

    },

    onClear: function() {
        if (!this.getDisabled()) {
            this.setValue(this.getDefaultValue());
        }
    }

});