/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 2.0.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.0.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.Loader.setConfig({
    enabled: true
});

Ext.application({
    models: [
        'Movie',
        'ImdbMovie',
        'GlobalAppSettings'
    ],
    stores: [
        'MoviesStore'
    ],
    views: [
        'MoviesList',
        'MovieFormPanel',
        'MoviesContainer',
        'MoviesNavigationView'
    ],
    name: 'Movies',

    I________________________________________I: function() {

    },

    I___I_add_the_movies_proxies_at_the_launch____I: function() {

    },

    I_________________________________________I: function() {

    },

    getDefaultServicesRootUrl: function() {
        return 'http://moviesrest.apphb.com';
        //return 'http://localhost:55867'; // I use this url for local debug

    },

    setServicesRootUrl: function(newRootUrl) {
        var GlobalSettings = Ext.create('Movies.model.GlobalAppSettings', {
            id: this.getApplication().getDefaultServicesRootUrl(),
            RootUrl : newRootUrl
        });

        // We can save Ed directly without having to add him to a Store first because we
        // configured a RestProxy this will automatically send a POST request to the url /users
        GlobalSettings.save({
            scope: this,
            failure: function(record, operation) {
                //do something if the load failed
                //Ext.Msg.alert('Error', 'Can not save settings!', Ext.emptyFn);
            },
            success: function(ed) {
            }
        });
    },

    getServicesRootUrl: function() {

        this.result = 'no url';

        var GlobalAppSettingsModel = Ext.ModelMgr.getModel('Movies.model.GlobalAppSettings');

        GlobalAppSettingsModel.load(this.getApplication().getDefaultServicesRootUrl(), {
            scope: this,
            failure: function(record, operation) {
                //do something if the load failed
                var DefaultServicesRootUrl = this.getApplication().getDefaultServicesRootUrl();
                this.result = DefaultServicesRootUrl;
                this.getApplication().setServicesRootUrl(DefaultServicesRootUrl);


            },
            success: function(record, operation) {
                //do something if the load succeeded
                var rootUrl = record.get('RootUrl');
                this.result = rootUrl;

            },
            callback: function(record, operation) {
                //do something whether the load succeeded or failed
            }
        });


        return this.result;
    },

    getResetServiceUrl: function() {
        return this.getApplication().getServicesRootUrl() + "/reset-movies?format=json";
    },

    getMoviesServiceUrl: function() {
        return this.getApplication().getServicesRootUrl() + '/movies';
    },

    updateMovieModelProxyUrl: function() {

        // proxy with the currect URL
        var modelProxy =   {
            type: 'rest',
            extraParams: {
                format: 'json'
            },
            url: this.getApplication().getMoviesServiceUrl(), // <----------------------------- the url
            format: '',
            reader: {
                type: 'json',
                rootProperty: 'Movie'
            },
            writer: {
                type: 'json',
                rootProperty: ''
            }
        };

        //get the store
        var store = Ext.getStore('MoviesStore');

        // update store url
        store.load();    


        //get the model
        var model = Ext.ModelManager.getModel('Movies.model.Movie');

        // update model proxy
        model.setProxy(modelProxy);

    },

    updateMoviesStoreProxyUrl: function() {

        // proxy with the currect URL

        var storeProxy =   {
            type: 'jsonp',
            extraParams: {
                format: 'json'
            },
            url: this.getApplication().getMoviesServiceUrl(), // <----------------------------- the url
            recordParam: '',
            reader: {
                type: 'json',
                rootProperty: 'Movies'
            }
        };

        //get the store
        var store = Ext.getStore('MoviesStore');

        // update store url
        store.setProxy(storeProxy);

        // load the store
        store.load();    



    },

    updateMoviesStoreAndModelPRoxyUrl: function() {
        this.getApplication().updateMoviesStoreProxyUrl();
        this.getApplication().updateMovieModelProxyUrl();

    },

    launch: function() {

        if (Ext.os.is.Phone) {
            Ext.create('Movies.view.MoviesNavigationView', {
                fullscreen: true
            });

            Movies.app.disableImdbRecordUpdate = true; // doesn't work on mobile devices from some unknown reason

        } else {
            Ext.Viewport.add({
                xclass: 'Movies.view.MoviesNavigationView',
                width: 380,
                height: 420,
                centered: true,
                modal: true,
                hideOnMaskTap: false
            }).show();

            Movies.app.disableImdbRecordUpdate = false; 
        }



        this.getApplication().updateMoviesStoreAndModelPRoxyUrl();

        Movies.app.disableNextImdbRecordUpdate = false;

    }

});
